[{"/home/ly/mining-graph/src/index.js":"1","/home/ly/mining-graph/src/reportWebVitals.js":"2","/home/ly/mining-graph/src/App.js":"3","/home/ly/mining-graph/src/sectorLife/sectors.js":"4","/home/ly/mining-graph/src/sectorLife/list.js":"5","/home/ly/mining-graph/src/sectorLife/sectorState.js":"6","/home/ly/mining-graph/src/domain.js":"7"},{"size":500,"mtime":1606987241660,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1606959198359,"results":"10","hashOfConfig":"9"},{"size":339,"mtime":1607066856047,"results":"11","hashOfConfig":"9"},{"size":1462,"mtime":1607066383642,"results":"12","hashOfConfig":"9"},{"size":2895,"mtime":1607066322634,"results":"13","hashOfConfig":"9"},{"size":3955,"mtime":1607006028654,"results":"14","hashOfConfig":"9"},{"size":83,"mtime":1607066386110,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1q479ms",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ly/mining-graph/src/index.js",[],["32","33"],"/home/ly/mining-graph/src/reportWebVitals.js",[],"/home/ly/mining-graph/src/App.js",["34"],"/home/ly/mining-graph/src/sectorLife/sectors.js",[],"/home/ly/mining-graph/src/sectorLife/list.js",["35","36"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport '../index.css';\nimport './list.css';\nimport DomainProduction from '../domain';\nimport { List, message, Spin } from 'antd';\nimport reqwest from 'reqwest';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nconst loadStateUrl = `/query/states?`;\n\nclass ListView extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    state = {\n      total: 0,\n      data: [],\n      loading: false,\n      hasMore: true,\n      offset: 0,\n      size: 30,\n    };\n  \n    componentDidMount() {\n      console.log(this.props.stat)\n\n      this.fetchData(res => {\n        this.setState({\n          data: res.data,\n          total: res.total,\n        });\n      }, this.state.offset, this.state.size);\n    }\n  \n    fetchData = (callback, offset, size) => {\n      let targetUrl =  DomainProduction + loadStateUrl + \"name=\" + this.props.stat + \"&offset=\" + offset + \"&size=\" + size\n      console.log(targetUrl)\n\n      reqwest({\n        url: targetUrl,\n        type: 'json',\n        method: 'get',\n        contentType: 'application/json',\n        success: res => {\n          callback(res);\n        },\n      });\n    };\n  \n    handleInfiniteOnLoad = () => {\n      let { data } = this.state;\n      this.setState({\n        loading: true,\n      });\n\n      if (data.length >= this.state.total) {\n        message.warning('Infinite List loaded all');\n        this.setState({\n          hasMore: false,\n          loading: false,\n        });\n        return;\n      }\n\n      this.state.offset++\n\n      this.fetchData(res => {\n        data = data.concat(res.data);\n        this.setState({\n          data,\n          total: res.total,\n          loading: false,\n        });\n      }, this.state.offset, this.state.size);\n    };\n  \n    render() {\n      return (\n        <div>\n          <div className=\"col-header\">\n            <div className=\"statView\">{this.props.stat}</div>\n            <div className=\"totalView\">{this.state.total}</div>\n          </div>\n\n          <div className=\"demo-infinite-container\">\n            <InfiniteScroll\n              initialLoad={false}\n              pageStart={0}\n              loadMore={this.handleInfiniteOnLoad}\n              hasMore={!this.state.loading && this.state.hasMore}\n              useWindow={false}\n            >\n              <List\n                dataSource={this.state.data}\n                renderItem={item => (\n                  <List.Item className=\"row-item\">\n                    <div>{item.SectorNumber}</div>\n                  </List.Item>\n                )}\n              >\n                {this.state.loading && this.state.hasMore && (\n                  <div className=\"demo-loading-container\">\n                    <Spin />\n                  </div>\n                )}\n              </List>\n            </InfiniteScroll>\n        </div>\n      </div>\n      );\n    }\n  }\n\nexport default ListView;","/home/ly/mining-graph/src/sectorLife/sectorState.js",["37","38"],"/home/ly/mining-graph/src/domain.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":5,"column":9,"nodeType":"45","messageId":"46","endLine":5,"endColumn":15},{"ruleId":"47","severity":1,"message":"48","line":13,"column":5,"nodeType":"49","messageId":"50","endLine":15,"endColumn":6},{"ruleId":"51","severity":1,"message":"52","line":67,"column":7,"nodeType":"53","endLine":67,"endColumn":17},{"ruleId":"43","severity":1,"message":"54","line":1,"column":5,"nodeType":"45","messageId":"46","endLine":1,"endColumn":11},{"ruleId":"55","severity":2,"message":"56","line":52,"column":16,"nodeType":"45","messageId":"57","endLine":52,"endColumn":28},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'Header' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'states' is assigned a value but never used.","no-undef","'SectorStates' is not defined.","undef","no-global-assign","no-unsafe-negation"]